generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String            @id @default(cuid())
  email     String            @unique
  name      String?
  avatarUrl String?
  workouts  Workout[]
  templates WorkoutTemplate[]
  exercises Exercise[]
  measures  Measurement[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Workout {
  id                    String            @id @default(cuid())
  userId                String
  user                  User              @relation(fields: [userId], references: [id])
  title                 String
  notes                 String?
  startedAt             DateTime          @default(now())
  finishedAt            DateTime?
  duration              Int?
  status                WorkoutStatus     @default(IN_PROGRESS)
  createdFromTemplate   WorkoutTemplate?  @relation(fields: [createdFromTemplateId], references: [id])
  createdFromTemplateId String?
  exercises             WorkoutExercise[]
  createdAt             DateTime          @default(now())
}

enum WorkoutStatus {
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model WorkoutExercise {
  id                   String       @id @default(cuid())
  workoutId            String
  workout              Workout      @relation(fields: [workoutId], references: [id])
  exerciseId           String
  exercise             Exercise     @relation(fields: [exerciseId], references: [id])
  order                Int
  nameSnapshot         String
  bodyPartSnapshot     String
  categorySnapshot     String
  instructionsSnapshot String?
  sets                 WorkoutSet[]
  createdAt            DateTime     @default(now())
}

model WorkoutSet {
  id                String          @id @default(cuid())
  workoutExerciseId String
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id])
  weight            Float
  reps              Int
  isValid           Boolean         @default(true)
  createdAt         DateTime        @default(now())
}

model Exercise {
  id                      String                    @id @default(cuid())
  userId                  String?
  user                    User?                     @relation(fields: [userId], references: [id])
  name                    String
  bodyPart                String
  category                String
  instructions            String?
  createdAt               DateTime                  @default(now())
  WorkoutExercise         WorkoutExercise[]
  WorkoutTemplateExercise WorkoutTemplateExercise[]
}

model WorkoutTemplate {
  id        String                    @id @default(cuid())
  userId    String
  user      User                      @relation(fields: [userId], references: [id])
  title     String
  exercises WorkoutTemplateExercise[]
  createdAt DateTime                  @default(now())
  Workout   Workout[]
}

model WorkoutTemplateExercise {
  id                String               @id @default(cuid())
  workoutTemplateId String
  workoutTemplate   WorkoutTemplate      @relation(fields: [workoutTemplateId], references: [id])
  exerciseId        String
  exercise          Exercise             @relation(fields: [exerciseId], references: [id])
  order             Int
  sets              WorkoutTemplateSet[]
}

model WorkoutTemplateSet {
  id                 String                  @id @default(cuid())
  templateExerciseId String
  templateExercise   WorkoutTemplateExercise @relation(fields: [templateExerciseId], references: [id])
  weight             Float
  reps               Int
}

model Measurement {
  id     String   @id @default(cuid())
  userId String
  user   User     @relation(fields: [userId], references: [id])
  type   String
  value  Float
  unit   String
  date   DateTime
}
