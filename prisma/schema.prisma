// generator dbml {
//   provider = "prisma-dbml-generator"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  password           String
  name               String?
  avatarUrl          String?
  workouts           Workout[]
  exercises          Exercise[]
  measures           MeasurementEntry[]
  customMeasurements Measurement[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  WorkoutFolder      WorkoutFolder[]
}

model Workout {
  id         String            @id @default(uuid())
  userId     String?
  user       User?             @relation(fields: [userId], references: [id])
  title      String
  notes      String?
  startedAt  DateTime          @default(now())
  finishedAt DateTime?
  duration   Int?
  status     WorkoutStatus     @default(IN_PROGRESS)
  exercises  WorkoutExercise[]
  createdAt  DateTime          @default(now())
  isArchived Boolean           @default(false)
  folderId   String?
  folder     WorkoutFolder?    @relation(fields: [folderId], references: [id])
}

enum WorkoutStatus {
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model WorkoutExercise {
  id                   String       @id @default(uuid())
  workoutId            String
  workout              Workout      @relation(fields: [workoutId], references: [id])
  exerciseId           String
  exercise             Exercise     @relation(fields: [exerciseId], references: [id])
  order                Int
  nameSnapshot         String
  bodyPartSnapshot     String
  categorySnapshot     String
  instructionsSnapshot String?
  sets                 WorkoutSet[]
  createdAt            DateTime     @default(now())
}

model WorkoutSet {
  id                String          @id @default(uuid())
  workoutExerciseId String
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id])
  isValid           Boolean         @default(true)
  createdAt         DateTime        @default(now())

  data WorkoutSetData?
}

model WorkoutSetData {
  id   String         @id
  type WorkoutSetType @default(REPS)
  set  WorkoutSet     @relation(fields: [id], references: [id])

  repsSet     RepsSet?
  timeSet     TimeSet?
  distanceSet DistanceSet?
  rpeSet      RpeSet?
}

model RepsSet {
  id     String         @id
  data   WorkoutSetData @relation(fields: [id], references: [id])
  reps   Int
  weight Float?
}

model TimeSet {
  id              String         @id
  data            WorkoutSetData @relation(fields: [id], references: [id])
  durationSeconds Int
}

model DistanceSet {
  id             String         @id
  data           WorkoutSetData @relation(fields: [id], references: [id])
  distanceMeters Float
}

model RpeSet {
  id    String         @id
  data  WorkoutSetData @relation(fields: [id], references: [id])
  rpe   Int
  notes String?
}

model Exercise {
  id               String            @id @default(uuid())
  externalId       String?           @unique
  language         String            @default("en")
  userId           String?
  user             User?             @relation(fields: [userId], references: [id])
  name             String
  bodyPart         BodyPart
  equipment        EquipmentType
  target           MuscleGroup
  secondaryMuscles MuscleGroup[]
  instructions     String[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  WorkoutExercise  WorkoutExercise[]
  ExerciseMedia    ExerciseMedia[]
}

model ExerciseMedia {
  id         String    @id @default(uuid())
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId String
  url        String
  mediaType  MediaType
}

enum MediaType {
  GIF
  IMAGE
  YOUTUBE_VIDEO
}

model MeasurementEntry {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  measurementId String
  measurement   Measurement @relation(fields: [measurementId], references: [id])
  value         Float
  unit          String
  date          DateTime
}

model Measurement {
  id        String             @id @default(uuid())
  userId    String? // null para padr√µes do sistema
  user      User?              @relation(fields: [userId], references: [id])
  name      String
  unit      String
  isDefault Boolean            @default(false)
  entries   MeasurementEntry[]
}

model WorkoutFolder {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  name      String
  workouts  Workout[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum EquipmentType {
  ASSISTED             @map("assisted")
  BAND                 @map("band")
  BARBELL              @map("barbell")
  BODY_WEIGHT          @map("body weight")
  BOSU_BALL            @map("bosu ball")
  CABLE                @map("cable")
  DUMBBELL             @map("dumbbell")
  ELLIPTICAL_MACHINE   @map("elliptical machine")
  EZ_BARBELL           @map("ez barbell")
  HAMMER               @map("hammer")
  KETTLEBELL           @map("kettlebell")
  LEVERAGE_MACHINE     @map("leverage machine")
  MEDICINE_BALL        @map("medicine ball")
  OLYMPIC_BARBELL      @map("olympic barbell")
  RESISTANCE_BAND      @map("resistance band")
  ROLLER               @map("roller")
  ROPE                 @map("rope")
  SKIERG_MACHINE       @map("skierg machine")
  SLED_MACHINE         @map("sled machine")
  SMITH_MACHINE        @map("smith machine")
  STABILITY_BALL       @map("stability ball")
  STATIONARY_BIKE      @map("stationary bike")
  STEPMILL_MACHINE     @map("stepmill machine")
  TIRE                 @map("tire")
  TRAP_BAR             @map("trap bar")
  UPPER_BODY_ERGOMETER @map("upper body ergometer")
  WEIGHTED             @map("weighted")
  WHEEL_ROLLER         @map("wheel roller")
}

enum BodyPart {
  WAIST      @map("waist")
  UPPER_LEGS @map("upper legs")
  BACK       @map("back")
  LOWER_LEGS @map("lower legs")
  CHEST      @map("chest")
  UPPER_ARMS @map("upper arms")
  CARDIO     @map("cardio")
  SHOULDERS  @map("shoulders")
  LOWER_ARMS @map("lower arms")
  NECK       @map("neck")
}

enum MuscleGroup {
  ABDOMINALS            @map("abdominals")
  ABDUCTORS             @map("abductors")
  ABS                   @map("abs")
  ADDUCTORS             @map("adductors")
  ANKLE_STABILIZERS     @map("ankle stabilizers")
  ANKLES                @map("ankles")
  BACK                  @map("back")
  BICEPS                @map("biceps")
  BRACHIALIS            @map("brachialis")
  CALVES                @map("calves")
  CARDIOVASCULAR_SYSTEM @map("cardiovascular system")
  CHEST                 @map("chest")
  CORE                  @map("core")
  DELTOIDS              @map("deltoids")
  DELTS                 @map("delts")
  FEET                  @map("feet")
  FOREARMS              @map("forearms")
  GLUTES                @map("glutes")
  GRIP_MUSCLES          @map("grip muscles")
  GROIN                 @map("groin")
  HAMSTRINGS            @map("hamstrings")
  HANDS                 @map("hands")
  HIP_FLEXORS           @map("hip flexors")
  INNER_THIGHS          @map("inner thighs")
  LATISSIMUS_DORSI      @map("latissimus dorsi")
  LATS                  @map("lats")
  LEVATOR_SCAPULAE      @map("levator scapulae")
  LOWER_ABS             @map("lower abs")
  LOWER_BACK            @map("lower back")
  OBLIQUES              @map("obliques")
  PECTORALS             @map("pectorals")
  QUADRICEPS            @map("quadriceps")
  QUADS                 @map("quads")
  REAR_DELTOIDS         @map("rear deltoids")
  RHOMBOIDS             @map("rhomboids")
  ROTATOR_CUFF          @map("rotator cuff")
  SERRATUS_ANTERIOR     @map("serratus anterior")
  SHINS                 @map("shins")
  SHOULDERS             @map("shoulders")
  SOLEUS                @map("soleus")
  SPINE                 @map("spine")
  STERNOCLEIDOMASTOID   @map("sternocleidomastoid")
  TRAPEZIUS             @map("trapezius")
  TRAPS                 @map("traps")
  TRICEPS               @map("triceps")
  UPPER_BACK            @map("upper back")
  UPPER_CHEST           @map("upper chest")
  WRIST_EXTENSORS       @map("wrist extensors")
  WRIST_FLEXORS         @map("wrist flexors")
  WRISTS                @map("wrists")
}

enum WorkoutSetType {
  REPS
  TIME
  DISTANCE
  RPE
}
